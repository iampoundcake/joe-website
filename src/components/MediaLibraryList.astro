---
import type { CollectionEntry } from "astro:content";
import MediaLibraryPreview from "./MediaLibraryPreview.astro";

interface Props {
	items: CollectionEntry<"media-library">[];
}

const { items } = Astro.props;
const initialItems = items.slice(0, 6);
const remainingItems = items.slice(6);
---

<div class="media-library-container">
	<ul class="-mx-4 flex flex-wrap" id="media-list">
		{initialItems.map((media) => <MediaLibraryPreview media={media} />)}
	</ul>
	{
		remainingItems.length > 0 && (
			<div class="mt-10 flex justify-center" transition:persist>
				<button
					id="load-more"
					class="h-[45px] w-[200px] rounded-md bg-[#5D6B00] font-mono text-[#FFFFFF]"
					type="button"
				>
					Load More
				</button>
			</div>
		)
	}
</div>

<template id="remaining-items">
	{remainingItems.map((media) => <MediaLibraryPreview media={media} />)}
</template>

<script>
	let currentlyShown = 6;
	const ITEMS_PER_PAGE = 6;

	function showNextItems() {
		const template = document.getElementById("remaining-items") as HTMLTemplateElement;
		const mediaList = document.getElementById("media-list");
		const loadMoreButton = document.getElementById("load-more") as HTMLButtonElement;
		const remainingNodes = Array.from(template.content.children);
		const itemsToShow = Math.min(ITEMS_PER_PAGE, remainingNodes.length);

		if (!mediaList || !loadMoreButton) return;

		// Clone and animate the next batch of items
		for (let i = 0; i < itemsToShow; i++) {
			const item = remainingNodes[i].cloneNode(true) as HTMLElement;
			item.style.opacity = "0";
			item.style.transform = "translateY(20px)";
			mediaList.appendChild(item);

			// Trigger animation
			requestAnimationFrame(() => {
				item.style.transition = "opacity 0.5s ease-out, transform 0.5s ease-out";
				item.style.opacity = "1";
				item.style.transform = "translateY(0)";
			});

			// Remove the item from the template
			template.content.removeChild(remainingNodes[i]);
		}

		// Hide button if no more items
		if (template.content.children.length === 0) {
			loadMoreButton.style.display = "none";
		}
	}

	// Add click handler to load more button
	const loadMoreButton = document.getElementById("load-more") as HTMLButtonElement;
	if (loadMoreButton) {
		loadMoreButton.addEventListener("click", () => {
			loadMoreButton.textContent = "Loading...";
			loadMoreButton.disabled = true;

			// Simulate loading delay
			setTimeout(() => {
				showNextItems();
				loadMoreButton.textContent = "Load More";
				loadMoreButton.disabled = false;
			}, 500);
		});
	}
</script>

<style>
	.media-library-container {
		container-type: inline-size;
	}

	#media-list > li {
		opacity: 1;
		transform: translateY(0);
		transition:
			opacity 0.5s ease-out,
			transform 0.5s ease-out;
	}
</style>

