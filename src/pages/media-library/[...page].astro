---
import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import PageLayout from "@/layouts/Base.astro";
import { getAllMediaLibrary, getUniqueTags, sortMDByDate } from "@/data/media-library";
import MediaLibraryList from "@/components/MediaLibraryList.astro";

export const getStaticPaths = (async () => {
	const allMediaLibrary = await getAllMediaLibrary();
	const allMediaLibraryByDate = sortMDByDate(allMediaLibrary);
	const uniqueTags = getUniqueTags(allMediaLibrary);

	// Return a single path with all the data we need
	return [
		{
			params: { page: undefined },
			props: { allMediaLibraryByDate, uniqueTags },
		},
	];
}) satisfies GetStaticPaths;

interface Props {
	allMediaLibraryByDate: CollectionEntry<"media-library">[];
	uniqueTags: string[];
}

const { allMediaLibraryByDate, uniqueTags } = Astro.props;

const meta = {
	description: "Ready my collection of media library and the things that interest me",
	title: "Media Library",
};
---

<PageLayout meta={meta}>
	<h1 class="title mb-6">Media Library ðŸ“¼</h1>
	<div class="grid gap-y-16 sm:grid-cols-[3fr_1fr] sm:gap-x-8">
		<section aria-label="Media Library list">
			<MediaLibraryList items={allMediaLibraryByDate} />
		</section>
		{
			!!uniqueTags.length && (
				<aside>
					<h2 class="mb-4 flex items-center text-lg font-semibold">
						<svg
							aria-hidden="true"
							class="h-6 w-6"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="1.5"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path d="M0 0h24v24H0z" fill="none" stroke="none" />
							<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
							<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
							<path d="M6 9h-.01" />
						</svg>
						Tags
					</h2>
					<ul class="flex flex-wrap gap-2 text-bgColor">
						{uniqueTags.map((tag) => (
							<li>
								<a
									aria-label={`View all media library with the tag: ${tag}`}
									class="flex items-center justify-center rounded-lg bg-accent p-1"
									href={`/tags/${tag}/`}
								>
									{tag}
								</a>
							</li>
						))}
					</ul>
					<span class="mt-4 block sm:text-end">
						<a aria-label="View all blog categories" class="sm:hover:text-accent" href="/tags/">
							View all â†’
						</a>
					</span>
				</aside>
			)
		}
	</div>
</PageLayout>

<script>
	// Store all media items
	const allMediaItems = document.querySelectorAll("#media-list > li") as NodeListOf<HTMLElement>;
	let currentlyShown = 6;
	const ITEMS_PER_PAGE = 6;

	// Get the load more button
	const loadMoreButton = document.getElementById("load-more") as HTMLButtonElement;
	if (loadMoreButton) {
		loadMoreButton.addEventListener("click", () => {
			// Show loading state
			loadMoreButton.textContent = "Loading...";
			loadMoreButton.disabled = true;

			// Simulate loading delay (remove this in production)
			setTimeout(() => {
				// Calculate how many more items to show
				const remainingItems = allMediaItems.length - currentlyShown;
				const itemsToShow = Math.min(ITEMS_PER_PAGE, remainingItems);

				// Show the next batch of items with animation
				for (let i = 0; i < itemsToShow; i++) {
					const item = allMediaItems[currentlyShown + i];
					item.style.opacity = "0";
					item.style.transform = "translateY(20px)";
					item.style.display = "block";

					// Trigger animation
					requestAnimationFrame(() => {
						item.style.transition = "opacity 0.5s ease-out, transform 0.5s ease-out";
						item.style.opacity = "1";
						item.style.transform = "translateY(0)";
					});
				}

				currentlyShown += itemsToShow;

				// Update button state
				if (currentlyShown >= allMediaItems.length) {
					loadMoreButton.style.display = "none";
				} else {
					loadMoreButton.textContent = "Load More";
					loadMoreButton.disabled = false;
				}
			}, 500); // Remove this timeout in production
		});
	}
</script>

<style>
	#media-list > li {
		opacity: 1;
		transform: translateY(0);
		transition:
			opacity 0.5s ease-out,
			transform 0.5s ease-out;
	}

	/* Hide all items after the first 6 */
	#media-list > li:nth-child(n + 7) {
		display: none;
	}
</style>
