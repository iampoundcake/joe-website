---
import type { GetStaticPaths, Page } from "astro";
import type { CollectionEntry } from "astro:content";

import PageLayout from "@/layouts/Base.astro";
import Pagination from "@/components/Paginator.astro";
import CollectionPreview from "@/components/CollectionPreview.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
	const posts = await getCollection("post");
	const pageSize = 10;

	const dates = new Set();
	posts.forEach((post) => {
		const match = post.id.match(/.*-(\d{4})(\d{2})/);
		if (match) {
			dates.add(`${match[1]}/${match[2]}`);
		}
	});

	// Sort dates for prev/next navigation
	const sortedDates = Array.from(dates).sort();

	// Create pages for each month
	const paths = [];
	sortedDates.forEach((date, index) => {
		const [year, month] = date.split("/");

		// Get prev/next months
		const prevDate = index > 0 ? sortedDates[index - 1].split("/") : null;
		const nextDate = index < sortedDates.length - 1 ? sortedDates[index + 1].split("/") : null;

		// Get posts for this month
		const monthPosts = posts
			.filter((post) => {
				const match = post.id.match(/.*-(\d{4})(\d{2})/);
				return match && match[1] === year && match[2] === month;
			})
			.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());

		// Calculate number of pages needed
		const totalPages = Math.ceil(monthPosts.length / pageSize);

		// Create a path for each page
		for (let page = 1; page <= totalPages; page++) {
			const pageSlice = monthPosts.slice((page - 1) * pageSize, page * pageSize);
			paths.push({
				params: { year, month, page: page === 1 ? undefined : page },
				props: {
					posts: pageSlice,
					totalPages,
					currentPage: page,
					year,
					month,
					prevMonth: prevDate ? { year: prevDate[0], month: prevDate[1] } : null,
					nextMonth: nextDate ? { year: nextDate[0], month: nextDate[1] } : null,
				},
			});
		}
	});

	return paths;
}

const { posts, totalPages, currentPage, year, month, prevMonth, nextMonth } = Astro.props;
const displayDate = new Date(`${year}-${month}-01`).toLocaleString("default", {
	month: "long",
	year: "numeric",
});

const meta = {
	title: `Posts from ${displayDate}`,
	description: `Archive of posts from ${displayDate}`,
};

const paginationBase = `/posts/${year}/${month}`;

function getMonthDisplay(year: string, month: string) {
	return new Date(`${year}-${month}-01`).toLocaleString("default", {
		month: "long",
		year: "numeric",
	});
}
---

<PageLayout meta={meta}>
	<div class="space-y-6">
		<div class="flex items-center justify-between">
			<h1 class="title">Posts from {displayDate}</h1>
			<div class="flex items-center gap-4">
				{
					prevMonth && (
						<a
							href={`/posts/${prevMonth.year}/${prevMonth.month}`}
							class="hover:text-accent-dark flex items-center gap-1 text-accent"
							title={`View posts from ${getMonthDisplay(prevMonth.year, prevMonth.month)}`}
						>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-6 w-6"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M15 19l-7-7 7-7"
								/>
							</svg>
						</a>
					)
				}
				{
					nextMonth && (
						<a
							href={`/posts/${nextMonth.year}/${nextMonth.month}`}
							class="hover:text-accent-dark flex items-center gap-1 text-accent"
							title={`View posts from ${getMonthDisplay(nextMonth.year, nextMonth.month)}`}
						>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-6 w-6"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M9 5l7 7-7 7"
								/>
							</svg>
						</a>
					)
				}
			</div>
		</div>

		<ul class="space-y-8 text-start">
			{
				posts.map((post) => (
					<li class="flex flex-col flex-wrap gap-2 sm:flex-row [&_q]:basis-full">
						<CollectionPreview as="h2" item={post} withDesc />
					</li>
				))
			}
		</ul>

		<Pagination
			prevUrl={currentPage > 1
				? currentPage === 2
					? paginationBase
					: `${paginationBase}/${currentPage - 1}`
				: undefined}
			nextUrl={currentPage < totalPages ? `${paginationBase}/${currentPage + 1}` : undefined}
		/>
	</div>
</PageLayout>

<style>
	.container {
		max-width: 65ch;
		margin: 0 auto;
		padding: 1rem;
	}

	.title {
		margin-bottom: 2rem;
	}

	.post-list {
		list-style: none;
		padding: 0;
	}

	.post-item {
		margin-bottom: 1rem;
	}

	.post-item a {
		text-decoration: none;
		color: var(--text-color);
	}

	.post-item a:hover {
		text-decoration: underline;
	}
</style>
