import { f as createComponent, m as maybeRenderHead, u as unescapeHTML, r as renderTemplate, s as spreadAttributes } from './astro_03esds4C.mjs';
import { b as getImage, A as Astro__Z1USaxp } from './pages/404_CAanZK12.mjs';

const Astro__Z25LIRO = new Proxy({"src":"/_astro/logo.DMXfm6vf.png","width":512,"height":512,"format":"png"}, {
						get(target, name, receiver) {
							if (name === 'clone') {
								return structuredClone(target);
							}
							if (name === 'fsPath') {
								return "D:/joe-website/src/content/post_archive/markdown-elements/logo.png";
							}
							
							return target[name];
						}
					});

const images = async function(html) {
					const imageSources = {};
					{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\./logo\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "./logo.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__Z25LIRO, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "@/assets/about-astro\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "@/assets/about-astro.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__Z1USaxp, ...props});
													occurrenceCounter++;
											}
									}
					return imageSources;
			};

			async function updateImageReferences(html) {
				return images(html).then((imageSources) => {
						return html.replaceAll(/__ASTRO_IMAGE_="([^"]+)"/gm, (full, imagePath) => {
								const decodedImagePath = JSON.parse(imagePath.replace(/&#x22;/g, '"'));
		
								// Use the 'index' property for each image occurrence
								const srcKey = decodedImagePath.src + '_' + decodedImagePath.index;
		
								if (imageSources[srcKey].srcSet && imageSources[srcKey].srcSet.values.length > 0) {
										imageSources[srcKey].attributes.srcset = imageSources[srcKey].srcSet.attribute;
								}
		
								const { index, ...attributesWithoutIndex } = imageSources[srcKey].attributes;
		
								return spreadAttributes({
										src: imageSources[srcKey].src,
										...attributesWithoutIndex,
								});
						});
				});
		}
		

		// NOTE: This causes a top-level await to appear in the user's code, which can break very easily due to a Rollup
	  // bug and certain adapters not supporting it correctly. See: https://github.com/rollup/rollup/issues/4708
	  // Tread carefully!
			const html = await updateImageReferences("<h2 id=\"this-is-a-h2-heading\">This is a H2 Heading</h2>\n<h3 id=\"this-is-a-h3-heading\">This is a H3 Heading</h3>\n<h4 id=\"this-is-a-h4-heading\">This is a H4 Heading</h4>\n<h5 id=\"this-is-a-h5-heading\">This is a H5 Heading</h5>\n<h6 id=\"this-is-a-h6-heading\">This is a H6 Heading</h6>\n<h2 id=\"horizontal-rules\">Horizontal Rules</h2>\n<hr>\n<hr>\n<hr>\n<h2 id=\"emphasis\">Emphasis</h2>\n<p><strong>This is bold text</strong></p>\n<p><em>This is italic text</em></p>\n<p><del>Strikethrough</del></p>\n<h2 id=\"quotes\">Quotes</h2>\n<p>”Double quotes” and ‘single quotes’</p>\n<h2 id=\"blockquotes\">Blockquotes</h2>\n<blockquote>\n<p>Blockquotes can also be nested…</p>\n<blockquote>\n<p>…by using additional greater-than signs right next to each other…</p>\n</blockquote>\n</blockquote>\n<h2 id=\"references\">References</h2>\n<p>An example containing a clickable reference<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup> with a link to the source.</p>\n<p>Second example containing a reference<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup> with a link to the source.</p>\n<p>If you check out this example in <code>src/content/post/markdown-elements/index.md</code>, you’ll notice that the references and the heading “Footnotes” are added to the bottom of the page via the <a href=\"https://github.com/remarkjs/remark-rehype#options\" rel=\"nofollow, noopener, noreferrer\" target=\"_blank\">remark-rehype</a> plugin.</p>\n<h2 id=\"lists\">Lists</h2>\n<p>Unordered</p>\n<ul>\n<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>\n<li>Sub-lists are made by indenting 2 spaces:\n<ul>\n<li>Marker character change forces new list start:\n<ul>\n<li>Ac tristique libero volutpat at</li>\n<li>Facilisis in pretium nisl aliquet</li>\n<li>Nulla volutpat aliquam velit</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Very easy!</li>\n</ul>\n<p>Ordered</p>\n<ol>\n<li>\n<p>Lorem ipsum dolor sit amet</p>\n</li>\n<li>\n<p>Consectetur adipiscing elit</p>\n</li>\n<li>\n<p>Integer molestie lorem at massa</p>\n</li>\n<li>\n<p>You can use sequential numbers…</p>\n</li>\n<li>\n<p>…or keep all the numbers as <code>1.</code></p>\n</li>\n</ol>\n<p>Start numbering with offset:</p>\n<ol start=\"57\">\n<li>foo</li>\n<li>bar</li>\n</ol>\n<h2 id=\"code\">Code</h2>\n<p>Inline <code>code</code></p>\n<p>Indented code</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.xzu6r.css\"><script type=\"module\" src=\"/_astro/ec.dy9ns.js\"></script><figure class=\"frame\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#f8f8f2;--1:#54666c\">// Some comments</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#f8f8f2;--1:#54666c\">line 1 of code</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#f8f8f2;--1:#54666c\">line 2 of code</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#f8f8f2;--1:#54666c\">line 3 of code</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Some commentsline 1 of codeline 2 of codeline 3 of code\"><div></div></button></div></figure></div>\n<p>Block code “fences”</p>\n<div class=\"expressive-code\"><figure class=\"frame\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#f8f8f2;--1:#54666c\">Sample text here...</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Sample text here...\"><div></div></button></div></figure></div>\n<p>Syntax highlighting</p>\n<div class=\"expressive-code\"><figure class=\"frame\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#66D9EF;--0fs:italic;--1:#53676E;--1fw:bold\">var</span><span style=\"--0:#F8F8F2;--1:#54666C\"> </span><span style=\"--0:#A6E22E;--1:#1D689E\">foo</span><span style=\"--0:#F8F8F2;--1:#54666C\"> </span><span style=\"--0:#FB6DA0;--1:#5B6900\">=</span><span style=\"--0:#F8F8F2;--1:#54666C\"> </span><span style=\"--0:#66D9EF;--0fs:italic;--1:#53676E;--1fw:bold\">function</span><span style=\"--1:#54666C\"><span style=\"--0:#F8F8F2\"> (</span><span style=\"--0:#FD971F;--0fs:italic\">bar</span><span style=\"--0:#F8F8F2\">) {</span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#FB6DA0;--1:#5B6900\">return</span><span style=\"--0:#F8F8F2;--1:#54666C\"> </span><span style=\"--0:#F8F8F2;--1:#1D689E\">bar</span><span style=\"--0:#FB6DA0;--1:#5B6900\">++</span><span style=\"--0:#F8F8F2;--1:#54666C\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#F8F8F2;--1:#54666C\">};</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#F8F8F2;--1:#1D689E\">console</span><span style=\"--0:#F8F8F2;--1:#54666C\">.</span><span style=\"--0:#A6E22E;--1:#1D689E\">log</span><span style=\"--0:#F8F8F2;--1:#54666C\">(</span><span style=\"--0:#A6E22E;--1:#1D689E\">foo</span><span style=\"--0:#F8F8F2;--1:#54666C\">(</span><span style=\"--0:#B287FF;--1:#B22E6E\">5</span><span style=\"--0:#F8F8F2;--1:#54666C\">));</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"var foo = function (bar) {  return bar++;};console.log(foo(5));\"><div></div></button></div></figure></div>\n<h3 id=\"expressive-code-examples\">Expressive code examples</h3>\n<p>Adding a title</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title\"><figcaption class=\"header\"><span class=\"title\">file.js</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#F8F8F2;--1:#1D689E\">console</span><span style=\"--0:#F8F8F2;--1:#54666C\">.</span><span style=\"--0:#A6E22E;--1:#1D689E\">log</span><span style=\"--0:#F8F8F2;--1:#54666C\">(</span><span style=\"--0:#E6DB74;--1:#1D6F69\">\"Title example\"</span><span style=\"--0:#F8F8F2;--1:#54666C\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"console.log(&#x22;Title example&#x22;);\"><div></div></button></div></figure></div>\n<p>A bash terminal</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#66D9EF;--1:#1D689E\">echo</span><span style=\"--0:#F8F8F2;--1:#54666C\"> </span><span style=\"--0:#E6DB74;--1:#1D6F69\">\"A base terminal example\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"echo &#x22;A base terminal example&#x22;\"><div></div></button></div></figure></div>\n<p>Highlighting code lines</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title\"><figcaption class=\"header\"><span class=\"title\">line-markers.js</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#66D9EF;--0fs:italic;--1:#53676E;--1fw:bold\">function</span><span style=\"--0:#F8F8F2;--1:#54666C\"> </span><span style=\"--0:#A6E22E;--1:#1D689E\">demo</span><span style=\"--0:#F8F8F2;--1:#54666C\">() {</span></div></div><div class=\"ec-line highlight del\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2\">  </span></span><span style=\"--0:#F8F8F2;--1:#17537e\">console</span><span style=\"--0:#F8F8F2;--1:#445358\">.</span><span style=\"--0:#A6E22E;--1:#17537e\">log</span><span style=\"--0:#F8F8F2;--1:#445358\">(</span><span style=\"--0:#E6DB74;--1:#185a55\">\"this line is marked as deleted\"</span><span style=\"--0:#F8F8F2;--1:#445358\">);</span></div></div><div class=\"ec-line highlight ins\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#b6b3a6;--1:#4b5252;--1fs:italic\">// This line and the next one are marked as inserted</span></div></div><div class=\"ec-line highlight ins\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2\">  </span></span><span style=\"--0:#F8F8F2;--1:#17537e\">console</span><span style=\"--0:#F8F8F2;--1:#445358\">.</span><span style=\"--0:#A6E22E;--1:#17537e\">log</span><span style=\"--0:#F8F8F2;--1:#445358\">(</span><span style=\"--0:#E6DB74;--1:#185a55\">\"this is the second inserted line\"</span><span style=\"--0:#F8F8F2;--1:#445358\">);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#fc92b8;--1:#4a5500\">return</span><span style=\"--0:#F8F8F2;--1:#445358\"> </span><span style=\"--0:#E6DB74;--1:#185a55\">\"this line uses the neutral default marker type\"</span><span style=\"--0:#F8F8F2;--1:#445358\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#F8F8F2;--1:#54666C\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"function demo() {  console.log(&#x22;this line is marked as deleted&#x22;);  // This line and the next one are marked as inserted  console.log(&#x22;this is the second inserted line&#x22;);  return &#x22;this line uses the neutral default marker type&#x22;;}\"><div></div></button></div></figure></div>\n<p><a href=\"https://expressive-code.com/\" rel=\"nofollow, noopener, noreferrer\" target=\"_blank\">Expressive Code</a> can do a ton more than shown here, and includes a lot of <a href=\"https://expressive-code.com/reference/configuration/\" rel=\"nofollow, noopener, noreferrer\" target=\"_blank\">customisation</a>.</p>\n<h2 id=\"tables\">Tables</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>path to data files to supply the data that will be passed into templates.</td></tr><tr><td>engine</td><td>engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td>ext</td><td>extension to be used for dest files.</td></tr></tbody></table>\n<p>Right aligned columns</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"right\">Option</th><th align=\"right\">Description</th></tr></thead><tbody><tr><td align=\"right\">data</td><td align=\"right\">path to data files to supply the data that will be passed into templates.</td></tr><tr><td align=\"right\">engine</td><td align=\"right\">engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td align=\"right\">ext</td><td align=\"right\">extension to be used for dest files.</td></tr></tbody></table>\n<h2 id=\"images\">Images</h2>\n<p>Image in the same folder: <code>src/content/post/markdown-elements/logo.png</code></p>\n<img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./logo.png&#x22;,&#x22;alt&#x22;:&#x22;Astro theme cactus logo&#x22;,&#x22;index&#x22;:0}\">\n<p>Image in the aliased assets folder: <code>src/assets/about-astro.png</code></p>\n<img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;@/assets/about-astro.png&#x22;,&#x22;alt&#x22;:&#x22;A cartoon cactus looking at the Astro.build logo&#x22;,&#x22;index&#x22;:0}\">\n<h2 id=\"links\">Links</h2>\n<p><a href=\"https://markdown-it.github.io/\" rel=\"nofollow, noopener, noreferrer\" target=\"_blank\">Content from markdown-it</a></p>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 class=\"\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>Reference first footnote with a return to content link. <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>Second reference with a link. <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>");
	

				const frontmatter = {"title":"A post of Markdown elements","description":"This post is for testing and listing a number of different markdown elements","publishDate":"22 Feb 2023","updatedDate":"22 Jan 2024","tags":["test","markdown"],"minutesRead":"2 min read"};
				const file = "D:/joe-website/src/content/post_archive/markdown-elements/index.md";
				const url = undefined;
				function rawContent() {
					return "\r\n## This is a H2 Heading\r\n\r\n### This is a H3 Heading\r\n\r\n#### This is a H4 Heading\r\n\r\n##### This is a H5 Heading\r\n\r\n###### This is a H6 Heading\r\n\r\n## Horizontal Rules\r\n\r\n---\r\n\r\n---\r\n\r\n---\r\n\r\n## Emphasis\r\n\r\n**This is bold text**\r\n\r\n_This is italic text_\r\n\r\n~~Strikethrough~~\r\n\r\n## Quotes\r\n\r\n\"Double quotes\" and 'single quotes'\r\n\r\n## Blockquotes\r\n\r\n> Blockquotes can also be nested...\r\n>\r\n> > ...by using additional greater-than signs right next to each other...\r\n\r\n## References\r\n\r\nAn example containing a clickable reference[^1] with a link to the source.\r\n\r\nSecond example containing a reference[^2] with a link to the source.\r\n\r\n[^1]: Reference first footnote with a return to content link.\r\n[^2]: Second reference with a link.\r\n\r\nIf you check out this example in `src/content/post/markdown-elements/index.md`, you'll notice that the references and the heading \"Footnotes\" are added to the bottom of the page via the [remark-rehype](https://github.com/remarkjs/remark-rehype#options) plugin.\r\n\r\n## Lists\r\n\r\nUnordered\r\n\r\n- Create a list by starting a line with `+`, `-`, or `*`\r\n- Sub-lists are made by indenting 2 spaces:\r\n  - Marker character change forces new list start:\r\n    - Ac tristique libero volutpat at\r\n    - Facilisis in pretium nisl aliquet\r\n    - Nulla volutpat aliquam velit\r\n- Very easy!\r\n\r\nOrdered\r\n\r\n1. Lorem ipsum dolor sit amet\r\n2. Consectetur adipiscing elit\r\n3. Integer molestie lorem at massa\r\n\r\n4. You can use sequential numbers...\r\n5. ...or keep all the numbers as `1.`\r\n\r\nStart numbering with offset:\r\n\r\n57. foo\r\n1. bar\r\n\r\n## Code\r\n\r\nInline `code`\r\n\r\nIndented code\r\n\r\n    // Some comments\r\n    line 1 of code\r\n    line 2 of code\r\n    line 3 of code\r\n\r\nBlock code \"fences\"\r\n\r\n```\r\nSample text here...\r\n```\r\n\r\nSyntax highlighting\r\n\r\n```js\r\nvar foo = function (bar) {\r\n\treturn bar++;\r\n};\r\n\r\nconsole.log(foo(5));\r\n```\r\n\r\n### Expressive code examples\r\n\r\nAdding a title\r\n\r\n```js title=\"file.js\"\r\nconsole.log(\"Title example\");\r\n```\r\n\r\nA bash terminal\r\n\r\n```bash\r\necho \"A base terminal example\"\r\n```\r\n\r\nHighlighting code lines\r\n\r\n```js title=\"line-markers.js\" del={2} ins={3-4} {6}\r\nfunction demo() {\r\n\tconsole.log(\"this line is marked as deleted\");\r\n\t// This line and the next one are marked as inserted\r\n\tconsole.log(\"this is the second inserted line\");\r\n\r\n\treturn \"this line uses the neutral default marker type\";\r\n}\r\n```\r\n\r\n[Expressive Code](https://expressive-code.com/) can do a ton more than shown here, and includes a lot of [customisation](https://expressive-code.com/reference/configuration/).\r\n\r\n## Tables\r\n\r\n| Option | Description                                                               |\r\n| ------ | ------------------------------------------------------------------------- |\r\n| data   | path to data files to supply the data that will be passed into templates. |\r\n| engine | engine to be used for processing templates. Handlebars is the default.    |\r\n| ext    | extension to be used for dest files.                                      |\r\n\r\nRight aligned columns\r\n\r\n| Option |                                                               Description |\r\n| -----: | ------------------------------------------------------------------------: |\r\n|   data | path to data files to supply the data that will be passed into templates. |\r\n| engine |    engine to be used for processing templates. Handlebars is the default. |\r\n|    ext |                                      extension to be used for dest files. |\r\n\r\n## Images\r\n\r\nImage in the same folder: `src/content/post/markdown-elements/logo.png`\r\n\r\n![Astro theme cactus logo](./logo.png)\r\n\r\nImage in the aliased assets folder: `src/assets/about-astro.png`\r\n\r\n![A cartoon cactus looking at the Astro.build logo](@/assets/about-astro.png)\r\n\r\n## Links\r\n\r\n[Content from markdown-it](https://markdown-it.github.io/)\r\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"this-is-a-h2-heading","text":"This is a H2 Heading"},{"depth":3,"slug":"this-is-a-h3-heading","text":"This is a H3 Heading"},{"depth":4,"slug":"this-is-a-h4-heading","text":"This is a H4 Heading"},{"depth":5,"slug":"this-is-a-h5-heading","text":"This is a H5 Heading"},{"depth":6,"slug":"this-is-a-h6-heading","text":"This is a H6 Heading"},{"depth":2,"slug":"horizontal-rules","text":"Horizontal Rules"},{"depth":2,"slug":"emphasis","text":"Emphasis"},{"depth":2,"slug":"quotes","text":"Quotes"},{"depth":2,"slug":"blockquotes","text":"Blockquotes"},{"depth":2,"slug":"references","text":"References"},{"depth":2,"slug":"lists","text":"Lists"},{"depth":2,"slug":"code","text":"Code"},{"depth":3,"slug":"expressive-code-examples","text":"Expressive code examples"},{"depth":2,"slug":"tables","text":"Tables"},{"depth":2,"slug":"images","text":"Images"},{"depth":2,"slug":"links","text":"Links"},{"depth":2,"slug":"footnote-label","text":"Footnotes"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
